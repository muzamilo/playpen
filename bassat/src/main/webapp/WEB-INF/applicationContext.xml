<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

    <!-- setup the MySQL datasource -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/bassat?autoReconnect=true&amp;createDatabaseIfNotExist=true&amp;" />
        <property name="username" value="bassat" />
        <property name="password" value="bassat" />
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- enable component scanning and autowire (beware that this does not enable mapper scanning!) -->    
    <context:component-scan base-package="com.appedia.bassat.service" />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.appedia.bassat.domain" />
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.appedia.bassat.persistence" />
    </bean>

    <!-- Import Job Trigger, run every 5 seconds -->
    <bean id="mailboxPollingJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="mailboxPollingJob" />
        <property name="repeatInterval" value="5000" />
        <property name="startDelay" value="0" />
    </bean>

    <!-- Process Job Trigger, run every 5 seconds -->
    <bean id="statementImporterJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
        <property name="jobDetail" ref="statementImporterJob" />
        <property name="repeatInterval" value="5000" />
        <property name="startDelay" value="500" />
    </bean>

    <!-- scheduler for the Import Job based on the Simple Trigger -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <!--<ref bean="mailboxPollingJobTrigger"/>-->
                <ref bean="statementImporterJobTrigger"/>
            </list>
        </property>
    </bean>

    <!-- define services -->
    <bean id="statementService" class="com.appedia.bassat.service.StatementServiceImpl"/>
    <bean id="userService" class="com.appedia.bassat.service.UserServiceImpl"/>
    <bean id="accountService" class="com.appedia.bassat.service.AccountServiceImpl"/>

    <!-- define the running Import Job -->
    <bean name="mailboxPollingJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.appedia.bassat.job.MailboxPollingJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="statementService" value-ref="statementService"/>
                <entry key="userService" value-ref="userService"/>
                <entry key="accountService" value-ref="accountService"/>
                <entry key="statementBuilder" value-ref="statementBuilder"/>
                <entry key="mailboxMessagePoller" value-ref="mailboxMessagePoller"/>
                <entry key="pdfExtractor" value-ref="pdfExtractor"/>
                <!-- configurations -->
                <entry key="originatorSenderEmail" value="info@standardbank.co.za"/>
            </map>
        </property>
    </bean>

    <!-- define the running Import Job -->
    <bean name="statementImporterJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.appedia.bassat.job.StatementImporterJob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="statementService" value-ref="statementService"/>
                <entry key="userService" value-ref="userService"/>
                <entry key="accountService" value-ref="accountService"/>
                <entry key="statementBuilder" value-ref="statementBuilder"/>
                <entry key="pdfExtractor" value-ref="pdfExtractor"/>
            </map>
        </property>
    </bean>

    <!-- define the mailbox reader -->
    <bean id="mailboxMessagePoller" class="com.appedia.bassat.job.mailintegration.MailboxMessagePoller">
        <property name="host" value="pop.gmail.com"/>
        <property name="protocol" value="imaps"/>
        <property name="username" value="send2basat@gmail.com"/>
        <property name="password" value="Muzamil0"/>
        <property name="enableMockDeletes" value="true"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.store.protocol">imaps</prop>
            </props>
        </property>
    </bean>

    <!-- define the PDFExtractor -->
    <bean id="pdfExtractor" class="com.appedia.bassat.job.statementio.PDFExtractor" />

    <!-- define the Statement Builder -->
    <bean id="statementBuilder" class="com.appedia.bassat.job.statementio.StatementBuilder">
        <property name="transactionAccountStatementParser" ref="transactionAccountStatementParser"/>
        <property name="creditCardStatementParser" ref="creditCardStatementParser"/>
    </bean>

    <bean id="transactionAccountStatementParser" class="com.appedia.bassat.job.statementio.TransactionAccountStatementParser"/>
    <bean id="creditCardStatementParser" class="com.appedia.bassat.job.statementio.CreditCardStatementParser"/>

</beans>
